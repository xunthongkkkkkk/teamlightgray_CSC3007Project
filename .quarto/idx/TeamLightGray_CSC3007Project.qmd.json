{"title":"TeamLightGray_CSC3007Project","markdown":{"yaml":{"title":"TeamLightGray_CSC3007Project","author":"Team Lightgray","format":"html","knitr":{"opts_chunk":{"fig.width":12,"fig.height":8,"fig.align":"center"}}},"headingText":"Quarto","containsRefs":false,"markdown":"\n\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n# Running Code\n\n# Data preparation\n\n## Load Necessary Libraries\n\n```{r}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(scales)\nlibrary(tidyr)\nlibrary(forcats)\n```\n\n## Load Data\n\n```{r}\n# Load the data from the local file\ndata <- read_csv(\"IIB Data Breaches - LATEST - breaches.csv\")\n\n# Display the first few rows to check the structure\nhead(data)\n```\n\n## Check for NA Values Before Handling\n\n```{r}\n# Check for NA values in each column\nsum(is.na(data$sector))\nsum(is.na(data$year))\nsum(is.na(data$`records lost`))\n```\n\n## Group Sectors and Check Data\n\n```{r}\n# Need to decide whether we are using Sector to categorize the data\n\n# Display the unique sectors before grouping\nunique_sectors <- unique(data$sector)\nunique_sectors\n\n# Group sectors into broader categories\ndata <- data %>%\n  mutate(\n    sector_group = case_when(\n      grepl(\"web\", sector, ignore.case = TRUE) ~ \"Web\",\n      grepl(\"healthcare|health\", sector, ignore.case = TRUE) ~ \"Healthcare\",\n      grepl(\"app\", sector, ignore.case = TRUE) ~ \"App\",\n      grepl(\"retail\", sector, ignore.case = TRUE) ~ \"Retail\",\n      grepl(\"gaming\", sector, ignore.case = TRUE) ~ \"Gaming\",\n      grepl(\"transport\", sector, ignore.case = TRUE) ~ \"Transport\",\n      grepl(\"financial|finance\", sector, ignore.case = TRUE) ~ \"Financial\",\n      grepl(\"tech\", sector, ignore.case = TRUE) ~ \"Tech\",\n      grepl(\"government\", sector, ignore.case = TRUE) ~ \"Government\",\n      grepl(\"telecoms\", sector, ignore.case = TRUE) ~ \"Telecoms\",\n      grepl(\"legal\", sector, ignore.case = TRUE) ~ \"Legal\",\n      grepl(\"media\", sector, ignore.case = TRUE) ~ \"Media\",\n      grepl(\"academic\", sector, ignore.case = TRUE) ~ \"Academic\",\n      grepl(\"energy\", sector, ignore.case = TRUE) ~ \"Energy\",\n      grepl(\"military\", sector, ignore.case = TRUE) ~ \"Military\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  )\n\n# Should we decide what can some sector group combine to a big group? E.g. Goverment and Military -\\> Government?\n\n# Display the unique sector groups after grouping\nunique(data$sector_group)\n\n```\n\n## Check for NA Values After Handling\n\n```{r}\n# Check for NA values in the new column\nsum(is.na(data$sector_group))\n```\n\n## Handle Empty Records\n\n```{r}\n# Convert `records lost` to numeric, handling non-numeric values\ndata <- data %>%\n  mutate(`records lost` = as.numeric(gsub(\"[^0-9]\", \"\", `records lost`)),\n         year = as.numeric(year)) %>%\n  drop_na(`records lost`, year, sector_group)  # Drop rows with missing values in critical columns\n\n# Check for any NAs introduced by coercion\nsum(is.na(data$`records lost`))\nsum(is.na(data$year))\n\n# Drop rows with missing values in critical columns\ndata <- data %>%\n  drop_na(`records lost`, year, sector_group)\n\n# Ensure no NA values in the dataset\nsum(is.na(data$`records lost`))\nsum(is.na(data$year))\nsum(is.na(data$sector_group))\n\n# Display the first few rows to verify the new columns\nhead(data)\n```\n\n## Check for Duplicates Before Handling\n\n```{r}\n# Check for duplicate records\nduplicated_rows <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  filter(n() > 1)\nnrow(duplicated_rows)\n\n```\n\n## Handle Duplicates\n\n```{r}\n# Handle duplicate records by combining them\ndata <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  summarize(`records lost` = sum(`records lost`), .groups = 'drop')\n\n# Check for duplicates after handling\nduplicated_rows_after <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  filter(n() > 1)\nnrow(duplicated_rows_after)\n\n# Display the first few rows to verify the new columns\nhead(data)\n\n```\n\n## Filter and Aggregate Data\n\n```{r}\n# Do we still need this step after combining duplicate records within each sector group and year??\n\n# Define a threshold for major breaches (e.g., 100 million records)\n#threshold <- 100000000\n\n# Separate major and minor breaches\n#major_breaches <- data %>% filter(`records lost` >= threshold)\n#minor_breaches <- data %>% filter(`records lost` < threshold)\n\n# Aggregate minor breaches by sector and year\n#minor_breaches_aggregated <- minor_breaches %>%\n#  group_by(sector, year) %>%\n#  summarize(`records lost` = sum(`records lost`), .groups = 'drop') %>%\n#  mutate(organisation = \"Other\")\n\n# Combine major breaches and aggregated minor breaches\n#combined_data <- bind_rows(major_breaches, minor_breaches_aggregated)\n\n# Display the combined data\n#head(combined_data)\n\n```\n\n## Save cleaned data to csv file\n\n```{r}\n# When we finalize the visualisation need to save the combined data to new Excel\n\n```\n\n# From here onwards when we finalize improved visualisation will move to Poster.qmd\n\n# Data Visualisation\n\n## Define Color Palette and Verify Data Range\n\n```{r}\n# Define a distinct color palette for sectors\ncolor_palette <- c(\n  \"Web\" = \"#1f78b4\",\n  \"Healthcare\" = \"#33a02c\",\n  \"App\" = \"#e31a1c\",\n  \"Retail\" = \"#ffcc33\",\n  \"Gaming\" = \"#b2df8a\",\n  \"Transport\" = \"#a6cee3\",\n  \"Financial\" = \"#fb9a99\",\n  \"Tech\" = \"#ff7f00\",\n  \"Government\" = \"#6a3d9a\",\n  \"Telecoms\" = \"#cab2d6\",\n  \"Legal\" = \"#ffff99\",\n  \"Media\" = \"#fdbf6f\",\n  \"Academic\" = \"#b15928\",\n  \"Energy\" = \"#ff99c8\",\n  \"Military\" = \"#a1dab4\",\n  \"Miscellaneous\" = \"#999999\"\n)\n\n# Verify the data range and ensure it's within plotting limits\nsummary(data)\n```\n\n## Base Plot\n\n```{r}\n# Create base plot\nbase_plot <- ggplot(data, aes(x = year, y = `records lost`, size = `records lost`, fill = sector_group)) +\n  geom_jitter(shape = 21, color = \"black\", alpha = 0.6, width = 0.2, height = 0.2)\n\n# Display the base plot\nprint(base_plot)\n```\n\n## Add Size Scale\n\n```{r}\n# Add size scale to the plot\nplot_with_size <- base_plot +\n  scale_size_area(max_size = 20, breaks = c(100000000, 200000000, 300000000, 400000000), labels = c(\"100M\", \"200M\", \"300M\", \"400M\"))\n\n# Display the plot with size scale\nprint(plot_with_size)\n```\n\n## Add X and Y Scales\n\n```{r}\n# Add x and y scales to the plot\nplot_with_scales <- plot_with_size +\n  scale_x_continuous(breaks = seq(2004, 2024, 2), labels = as.character(seq(2004, 2024, 2)), limits = c(2004, 2024)) +\n  scale_y_continuous(labels = scales::comma, limits = c(0, 400000000))\n\n# Display the plot with x and y scales\nprint(plot_with_scales)\n```\n\n## Add Fill Scale\n\n```{r}\n# Add fill scale to the plot\nplot_with_fill <- plot_with_scales +\n  scale_fill_manual(values = color_palette)\n\n# Display the plot with fill scale\nprint(plot_with_fill)\n```\n\n## Add Guides\n\n```{r}\n# Add guides to the plot\nplot_with_guides <- plot_with_fill +\n  guides(\n    fill = guide_legend(ncol = 1, byrow = TRUE, title.position = \"top\", keyheight = unit(0.5, 'lines')),\n    size = guide_legend(ncol = 1, byrow = TRUE, title.position = \"top\", keyheight = unit(0.5, 'lines'))\n  )\n\n# Display the plot with guides\nprint(plot_with_guides)\n```\n\n## Customize Theme\n\n```{r}\n# Customize the theme of the plot\nplot_with_theme <- plot_with_guides +\n  theme_minimal() +\n  theme(\n    axis.title.x = element_text(size = 14, face = \"bold\"),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 12),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8),\n    legend.key.size = unit(0.3, 'lines'),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, face = \"italic\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"grey80\"),\n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"grey90\")\n  )\n\n# Display the plot with customized theme\nprint(plot_with_theme)\n```\n\n## Add Labels and Title\n\n```{r}\n# Add labels and title to the plot\nfinal_plot <- plot_with_theme +\n  labs(title = \"World's Biggest Data Breaches and Hacks\",\n       subtitle = \"From 2004 to 2024\",\n       x = \"Year\",\n       y = \"Number of Records Breached\",\n       size = \"Records Breached\",\n       fill = \"Sector\",\n       caption = \"Source: Information Is Beautiful\")\n\n# Add text labels to the plot\nfinal_plot_with_labels <- final_plot +\n  geom_text_repel(aes(label = ifelse(`records lost` >= 100000000, organisation, \"\")), size = 3, show.legend = FALSE)\n\n# Display the final plot with labels\nprint(final_plot_with_labels)\n```\n\n## Debug Output\n\n```{r}\n# Check the data summary for any anomalies\nsummary(data)\n\n```\n## Gantt Chart\n```{r}\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(ggrepel)\n\n# Load the data from the local file\ndata <- read_csv(\"IIB Data Breaches - LATEST - breaches.csv\")\n\n# Display the first few rows to check the structure\nprint(head(data))\n\n# Display the unique sectors\nunique_sectors <- unique(data$sector)\nprint(unique_sectors)\n\n# Group sectors into broader categories\ndata <- data %>%\n  mutate(\n    sector_group = case_when(\n      grepl(\"web\", sector, ignore.case = TRUE) ~ \"Web\",\n      grepl(\"healthcare|health\", sector, ignore.case = TRUE) ~ \"Healthcare\",\n      grepl(\"app\", sector, ignore.case = TRUE) ~ \"App\",\n      grepl(\"retail\", sector, ignore.case = TRUE) ~ \"Retail\",\n      grepl(\"gaming\", sector, ignore.case = TRUE) ~ \"Gaming\",\n      grepl(\"transport\", sector, ignore.case = TRUE) ~ \"Transport\",\n      grepl(\"financial|finance\", sector, ignore.case = TRUE) ~ \"Financial\",\n      grepl(\"tech\", sector, ignore.case = TRUE) ~ \"Tech\",\n      grepl(\"government\", sector, ignore.case = TRUE) ~ \"Government\",\n      grepl(\"telecoms\", sector, ignore.case = TRUE) ~ \"Telecoms\",\n      grepl(\"legal\", sector, ignore.case = TRUE) ~ \"Legal\",\n      grepl(\"media\", sector, ignore.case = TRUE) ~ \"Media\",\n      grepl(\"academic\", sector, ignore.case = TRUE) ~ \"Academic\",\n      grepl(\"energy\", sector, ignore.case = TRUE) ~ \"Energy\",\n      grepl(\"military\", sector, ignore.case = TRUE) ~ \"Military\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  )\n\n# Display the unique sector groups\nunique_sectors_grouped <- unique(data$sector_group)\nprint(unique_sectors_grouped)\n\n# Convert `records lost` to numeric, handling non-numeric values\ndata <- data %>%\n  mutate(`records lost` = as.numeric(gsub(\"[^0-9]\", \"\", `records lost`)),\n         year = as.numeric(year)) %>%\n  drop_na(`records lost`, year, sector_group)  # Drop rows with missing values in critical columns\n\n# Ensure no NA values in the dataset\ndata <- data %>%\n  filter(!is.na(`records lost`) & !is.na(year) & !is.na(sector_group))\n\n# Handle duplicate records by combining them\ndata <- data %>%\n  group_by(sector_group, year) %>%\n  summarize(`records lost` = sum(`records lost`), .groups = 'drop')\n\n# Display the first few rows to verify the new columns\nprint(head(data))\n\n# Filter to include only significant breaches (e.g., greater than 50 million records)\nfiltered_data <- data %>%\n  filter(`records lost` > 50000000)\n\n# Verify the data range and ensure it's within plotting limits\nsummary(filtered_data)\n\n# Base Gantt Chart\nbase_plot <- ggplot(filtered_data, aes(x = year, y = reorder(sector_group, -`records lost`), color = sector_group)) +\n  geom_segment(aes(xend = year + 0.5, yend = sector_group, size = `records lost`)) +\n  geom_point(aes(size = `records lost`)) +\n  scale_size_continuous(range = c(2, 10)) +\n  theme_minimal() +\n  labs(\n    title = \"Data Breaches Timeline\",\n    x = \"Year\",\n    y = \"Sector\",\n    size = \"Records Breached\",\n    color = \"Sector\"\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\"\n  )\n\n# Display the base plot\nprint(base_plot)\n\n```\n\n","srcMarkdownNoYaml":"\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n# Running Code\n\n# Data preparation\n\n## Load Necessary Libraries\n\n```{r}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(scales)\nlibrary(tidyr)\nlibrary(forcats)\n```\n\n## Load Data\n\n```{r}\n# Load the data from the local file\ndata <- read_csv(\"IIB Data Breaches - LATEST - breaches.csv\")\n\n# Display the first few rows to check the structure\nhead(data)\n```\n\n## Check for NA Values Before Handling\n\n```{r}\n# Check for NA values in each column\nsum(is.na(data$sector))\nsum(is.na(data$year))\nsum(is.na(data$`records lost`))\n```\n\n## Group Sectors and Check Data\n\n```{r}\n# Need to decide whether we are using Sector to categorize the data\n\n# Display the unique sectors before grouping\nunique_sectors <- unique(data$sector)\nunique_sectors\n\n# Group sectors into broader categories\ndata <- data %>%\n  mutate(\n    sector_group = case_when(\n      grepl(\"web\", sector, ignore.case = TRUE) ~ \"Web\",\n      grepl(\"healthcare|health\", sector, ignore.case = TRUE) ~ \"Healthcare\",\n      grepl(\"app\", sector, ignore.case = TRUE) ~ \"App\",\n      grepl(\"retail\", sector, ignore.case = TRUE) ~ \"Retail\",\n      grepl(\"gaming\", sector, ignore.case = TRUE) ~ \"Gaming\",\n      grepl(\"transport\", sector, ignore.case = TRUE) ~ \"Transport\",\n      grepl(\"financial|finance\", sector, ignore.case = TRUE) ~ \"Financial\",\n      grepl(\"tech\", sector, ignore.case = TRUE) ~ \"Tech\",\n      grepl(\"government\", sector, ignore.case = TRUE) ~ \"Government\",\n      grepl(\"telecoms\", sector, ignore.case = TRUE) ~ \"Telecoms\",\n      grepl(\"legal\", sector, ignore.case = TRUE) ~ \"Legal\",\n      grepl(\"media\", sector, ignore.case = TRUE) ~ \"Media\",\n      grepl(\"academic\", sector, ignore.case = TRUE) ~ \"Academic\",\n      grepl(\"energy\", sector, ignore.case = TRUE) ~ \"Energy\",\n      grepl(\"military\", sector, ignore.case = TRUE) ~ \"Military\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  )\n\n# Should we decide what can some sector group combine to a big group? E.g. Goverment and Military -\\> Government?\n\n# Display the unique sector groups after grouping\nunique(data$sector_group)\n\n```\n\n## Check for NA Values After Handling\n\n```{r}\n# Check for NA values in the new column\nsum(is.na(data$sector_group))\n```\n\n## Handle Empty Records\n\n```{r}\n# Convert `records lost` to numeric, handling non-numeric values\ndata <- data %>%\n  mutate(`records lost` = as.numeric(gsub(\"[^0-9]\", \"\", `records lost`)),\n         year = as.numeric(year)) %>%\n  drop_na(`records lost`, year, sector_group)  # Drop rows with missing values in critical columns\n\n# Check for any NAs introduced by coercion\nsum(is.na(data$`records lost`))\nsum(is.na(data$year))\n\n# Drop rows with missing values in critical columns\ndata <- data %>%\n  drop_na(`records lost`, year, sector_group)\n\n# Ensure no NA values in the dataset\nsum(is.na(data$`records lost`))\nsum(is.na(data$year))\nsum(is.na(data$sector_group))\n\n# Display the first few rows to verify the new columns\nhead(data)\n```\n\n## Check for Duplicates Before Handling\n\n```{r}\n# Check for duplicate records\nduplicated_rows <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  filter(n() > 1)\nnrow(duplicated_rows)\n\n```\n\n## Handle Duplicates\n\n```{r}\n# Handle duplicate records by combining them\ndata <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  summarize(`records lost` = sum(`records lost`), .groups = 'drop')\n\n# Check for duplicates after handling\nduplicated_rows_after <- data %>%\n  group_by(organisation, sector_group, year) %>%\n  filter(n() > 1)\nnrow(duplicated_rows_after)\n\n# Display the first few rows to verify the new columns\nhead(data)\n\n```\n\n## Filter and Aggregate Data\n\n```{r}\n# Do we still need this step after combining duplicate records within each sector group and year??\n\n# Define a threshold for major breaches (e.g., 100 million records)\n#threshold <- 100000000\n\n# Separate major and minor breaches\n#major_breaches <- data %>% filter(`records lost` >= threshold)\n#minor_breaches <- data %>% filter(`records lost` < threshold)\n\n# Aggregate minor breaches by sector and year\n#minor_breaches_aggregated <- minor_breaches %>%\n#  group_by(sector, year) %>%\n#  summarize(`records lost` = sum(`records lost`), .groups = 'drop') %>%\n#  mutate(organisation = \"Other\")\n\n# Combine major breaches and aggregated minor breaches\n#combined_data <- bind_rows(major_breaches, minor_breaches_aggregated)\n\n# Display the combined data\n#head(combined_data)\n\n```\n\n## Save cleaned data to csv file\n\n```{r}\n# When we finalize the visualisation need to save the combined data to new Excel\n\n```\n\n# From here onwards when we finalize improved visualisation will move to Poster.qmd\n\n# Data Visualisation\n\n## Define Color Palette and Verify Data Range\n\n```{r}\n# Define a distinct color palette for sectors\ncolor_palette <- c(\n  \"Web\" = \"#1f78b4\",\n  \"Healthcare\" = \"#33a02c\",\n  \"App\" = \"#e31a1c\",\n  \"Retail\" = \"#ffcc33\",\n  \"Gaming\" = \"#b2df8a\",\n  \"Transport\" = \"#a6cee3\",\n  \"Financial\" = \"#fb9a99\",\n  \"Tech\" = \"#ff7f00\",\n  \"Government\" = \"#6a3d9a\",\n  \"Telecoms\" = \"#cab2d6\",\n  \"Legal\" = \"#ffff99\",\n  \"Media\" = \"#fdbf6f\",\n  \"Academic\" = \"#b15928\",\n  \"Energy\" = \"#ff99c8\",\n  \"Military\" = \"#a1dab4\",\n  \"Miscellaneous\" = \"#999999\"\n)\n\n# Verify the data range and ensure it's within plotting limits\nsummary(data)\n```\n\n## Base Plot\n\n```{r}\n# Create base plot\nbase_plot <- ggplot(data, aes(x = year, y = `records lost`, size = `records lost`, fill = sector_group)) +\n  geom_jitter(shape = 21, color = \"black\", alpha = 0.6, width = 0.2, height = 0.2)\n\n# Display the base plot\nprint(base_plot)\n```\n\n## Add Size Scale\n\n```{r}\n# Add size scale to the plot\nplot_with_size <- base_plot +\n  scale_size_area(max_size = 20, breaks = c(100000000, 200000000, 300000000, 400000000), labels = c(\"100M\", \"200M\", \"300M\", \"400M\"))\n\n# Display the plot with size scale\nprint(plot_with_size)\n```\n\n## Add X and Y Scales\n\n```{r}\n# Add x and y scales to the plot\nplot_with_scales <- plot_with_size +\n  scale_x_continuous(breaks = seq(2004, 2024, 2), labels = as.character(seq(2004, 2024, 2)), limits = c(2004, 2024)) +\n  scale_y_continuous(labels = scales::comma, limits = c(0, 400000000))\n\n# Display the plot with x and y scales\nprint(plot_with_scales)\n```\n\n## Add Fill Scale\n\n```{r}\n# Add fill scale to the plot\nplot_with_fill <- plot_with_scales +\n  scale_fill_manual(values = color_palette)\n\n# Display the plot with fill scale\nprint(plot_with_fill)\n```\n\n## Add Guides\n\n```{r}\n# Add guides to the plot\nplot_with_guides <- plot_with_fill +\n  guides(\n    fill = guide_legend(ncol = 1, byrow = TRUE, title.position = \"top\", keyheight = unit(0.5, 'lines')),\n    size = guide_legend(ncol = 1, byrow = TRUE, title.position = \"top\", keyheight = unit(0.5, 'lines'))\n  )\n\n# Display the plot with guides\nprint(plot_with_guides)\n```\n\n## Customize Theme\n\n```{r}\n# Customize the theme of the plot\nplot_with_theme <- plot_with_guides +\n  theme_minimal() +\n  theme(\n    axis.title.x = element_text(size = 14, face = \"bold\"),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 12),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8),\n    legend.key.size = unit(0.3, 'lines'),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, face = \"italic\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"grey80\"),\n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"grey90\")\n  )\n\n# Display the plot with customized theme\nprint(plot_with_theme)\n```\n\n## Add Labels and Title\n\n```{r}\n# Add labels and title to the plot\nfinal_plot <- plot_with_theme +\n  labs(title = \"World's Biggest Data Breaches and Hacks\",\n       subtitle = \"From 2004 to 2024\",\n       x = \"Year\",\n       y = \"Number of Records Breached\",\n       size = \"Records Breached\",\n       fill = \"Sector\",\n       caption = \"Source: Information Is Beautiful\")\n\n# Add text labels to the plot\nfinal_plot_with_labels <- final_plot +\n  geom_text_repel(aes(label = ifelse(`records lost` >= 100000000, organisation, \"\")), size = 3, show.legend = FALSE)\n\n# Display the final plot with labels\nprint(final_plot_with_labels)\n```\n\n## Debug Output\n\n```{r}\n# Check the data summary for any anomalies\nsummary(data)\n\n```\n## Gantt Chart\n```{r}\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(ggrepel)\n\n# Load the data from the local file\ndata <- read_csv(\"IIB Data Breaches - LATEST - breaches.csv\")\n\n# Display the first few rows to check the structure\nprint(head(data))\n\n# Display the unique sectors\nunique_sectors <- unique(data$sector)\nprint(unique_sectors)\n\n# Group sectors into broader categories\ndata <- data %>%\n  mutate(\n    sector_group = case_when(\n      grepl(\"web\", sector, ignore.case = TRUE) ~ \"Web\",\n      grepl(\"healthcare|health\", sector, ignore.case = TRUE) ~ \"Healthcare\",\n      grepl(\"app\", sector, ignore.case = TRUE) ~ \"App\",\n      grepl(\"retail\", sector, ignore.case = TRUE) ~ \"Retail\",\n      grepl(\"gaming\", sector, ignore.case = TRUE) ~ \"Gaming\",\n      grepl(\"transport\", sector, ignore.case = TRUE) ~ \"Transport\",\n      grepl(\"financial|finance\", sector, ignore.case = TRUE) ~ \"Financial\",\n      grepl(\"tech\", sector, ignore.case = TRUE) ~ \"Tech\",\n      grepl(\"government\", sector, ignore.case = TRUE) ~ \"Government\",\n      grepl(\"telecoms\", sector, ignore.case = TRUE) ~ \"Telecoms\",\n      grepl(\"legal\", sector, ignore.case = TRUE) ~ \"Legal\",\n      grepl(\"media\", sector, ignore.case = TRUE) ~ \"Media\",\n      grepl(\"academic\", sector, ignore.case = TRUE) ~ \"Academic\",\n      grepl(\"energy\", sector, ignore.case = TRUE) ~ \"Energy\",\n      grepl(\"military\", sector, ignore.case = TRUE) ~ \"Military\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  )\n\n# Display the unique sector groups\nunique_sectors_grouped <- unique(data$sector_group)\nprint(unique_sectors_grouped)\n\n# Convert `records lost` to numeric, handling non-numeric values\ndata <- data %>%\n  mutate(`records lost` = as.numeric(gsub(\"[^0-9]\", \"\", `records lost`)),\n         year = as.numeric(year)) %>%\n  drop_na(`records lost`, year, sector_group)  # Drop rows with missing values in critical columns\n\n# Ensure no NA values in the dataset\ndata <- data %>%\n  filter(!is.na(`records lost`) & !is.na(year) & !is.na(sector_group))\n\n# Handle duplicate records by combining them\ndata <- data %>%\n  group_by(sector_group, year) %>%\n  summarize(`records lost` = sum(`records lost`), .groups = 'drop')\n\n# Display the first few rows to verify the new columns\nprint(head(data))\n\n# Filter to include only significant breaches (e.g., greater than 50 million records)\nfiltered_data <- data %>%\n  filter(`records lost` > 50000000)\n\n# Verify the data range and ensure it's within plotting limits\nsummary(filtered_data)\n\n# Base Gantt Chart\nbase_plot <- ggplot(filtered_data, aes(x = year, y = reorder(sector_group, -`records lost`), color = sector_group)) +\n  geom_segment(aes(xend = year + 0.5, yend = sector_group, size = `records lost`)) +\n  geom_point(aes(size = `records lost`)) +\n  scale_size_continuous(range = c(2, 10)) +\n  theme_minimal() +\n  labs(\n    title = \"Data Breaches Timeline\",\n    x = \"Year\",\n    y = \"Sector\",\n    size = \"Records Breached\",\n    color = \"Sector\"\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\"\n  )\n\n# Display the base plot\nprint(base_plot)\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"TeamLightGray_CSC3007Project.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","title":"TeamLightGray_CSC3007Project","author":"Team Lightgray","knitr":{"opts_chunk":{"fig.width":12,"fig.height":8,"fig.align":"center"}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}
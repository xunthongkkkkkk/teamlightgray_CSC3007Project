---
title: "testing_sheet2"
author: "sy"
format: html
knitr:
  opts_chunk:
    fig.width: 12
    fig.height: 10
    fig.align: center
---

```{r}
# Load required libraries
library(ggplot2)
library(dplyr)
library(ggrepel)
library(scales)
library(tidyverse)
library(gridExtra)

# Read the data
data <- read.csv("IIB Data Breaches - LATEST - breaches.csv")

# Group sectors into broader categories
data <- data %>%
  mutate(
    sector_group = case_when(
      grepl("web", sector, ignore.case = TRUE) ~ "Web",
      grepl("healthcare|health", sector, ignore.case = TRUE) ~ "Healthcare",
      grepl("app", sector, ignore.case = TRUE) ~ "App",
      grepl("retail", sector, ignore.case = TRUE) ~ "Retail",
      grepl("gaming", sector, ignore.case = TRUE) ~ "Gaming",
      grepl("transport", sector, ignore.case = TRUE) ~ "Transport",
      grepl("financial|finance", sector, ignore.case = TRUE) ~ "Financial",
      grepl("tech", sector, ignore.case = TRUE) ~ "Tech",
      grepl("government", sector, ignore.case = TRUE) ~ "Government",
      grepl("telecoms", sector, ignore.case = TRUE) ~ "Telecoms",
      grepl("legal", sector, ignore.case = TRUE) ~ "Legal",
      grepl("media", sector, ignore.case = TRUE) ~ "Media",
      grepl("academic", sector, ignore.case = TRUE) ~ "Academic",
      grepl("energy", sector, ignore.case = TRUE) ~ "Energy",
      grepl("military", sector, ignore.case = TRUE) ~ "Military",
      TRUE ~ "Miscellaneous"
    ),
    records.lost = as.numeric(gsub("[^0-9]", "", records.lost)),
    year = as.numeric(year)
  ) %>%
  drop_na(records.lost, year, sector_group)

# Filter the data based on the specified year range and minimum records lost
start_year <- 2010
end_year <- 2024
data <- data %>%
  filter(year >= start_year & year <= end_year) %>%
  drop_na(records.lost, year, sector_group)

# Calculate total records lost for each sector group and select top 10 sectors
top_sectors <- data %>%
  group_by(sector_group) %>%
  summarize(total_records_lost = sum(records.lost)) %>%
  arrange(desc(total_records_lost)) %>%
  top_n(10, wt = total_records_lost) %>%
  pull(sector_group)

# Filter the data to include only top 10 sectors
data <- data %>%
  filter(sector_group %in% top_sectors)

# Convert the year to a date format for plotting
data <- data %>%
  mutate(StartDate = as.Date(paste(year, "-01-01", sep = "")),
         EndDate = as.Date(paste(year, "-12-31", sep = "")))

# Sort the sectors by total records lost
sector_levels <- data %>%
  group_by(sector_group) %>%
  summarize(total_records_lost = sum(records.lost)) %>%
  arrange(desc(total_records_lost)) %>%
  pull(sector_group)

data <- data %>%
  mutate(sector_group = factor(sector_group, levels = rev(sector_levels)))

# Define important sectors to highlight
highlight_sectors <- c("Web", "Financial", "App", "Transport")

# Add a new column to specify color based on sector importance
data <- data %>%
  mutate(
    highlight = ifelse(as.character(sector_group) %in% highlight_sectors, as.character(sector_group), "Other")
  )

# Convert sector_group to a factor and then to numeric for plotting
data$sector_group_num <- as.numeric(factor(data$sector_group))

# Calculate the total number of data breaches each year
yearly_data <- data %>%
  group_by(year) %>%
  summarize(total_records_lost = sum(records.lost))
yearly_data <- yearly_data %>%
  filter(year < 2024)
data <- data %>%
  filter(year < 2024)
# Define color palette
color_palette <- c("Web" = "red", "Financial" = "red", "App" = "orange2", "Transport" = "orange2", "Other" = "gray")
coeff <- max(yearly_data$total_records_lost) / length(unique(data$sector_group_num))  # Adjust this coefficient to normalize the secondary axis

# Custom labelling function
label_billion <- function(x) {
   paste0(scales::comma(x / 1e9), "B")
}

# Create the plot
gantt_plot <- ggplot(data, aes(x = StartDate, y = sector_group_num)) +
  geom_segment(aes(xend = EndDate, yend = sector_group_num, size = records.lost, color = highlight), show.legend = TRUE) +
  geom_point(aes(size = records.lost, color = highlight), show.legend = TRUE) +
  scale_size_continuous(range = c(2, 10), breaks = c(50000000, 100000000, 500000000, 1000000000), labels = c("50M", "100M", "500M", "1B")) +
  scale_color_manual(values = color_palette, 
                     breaks = c("Web", "App"),
                     labels = c("High Vulnerability", "Emerging Threats"),
                     name = "Insights",
                     ) +
  scale_x_date(date_labels = "%Y", 
               date_breaks = "1 years", 
               limits = as.Date(c("2010-01-01", "2023-12-31"))
               ) +
  scale_y_continuous(
    name = "Sector",
    breaks = 1:length(unique(data$sector_group_num)),
    labels = levels(data$sector_group),
    sec.axis = sec_axis(~ . * coeff, 
                        name = "Total Records Stolen", 
                        breaks = seq(0, 3e9, by = 0.5e9), 
                        labels = label_billion)
    ) +
  labs(
    title = "Data Breaches Timeline by Sector",
    x = "Year",
    size = "Records Breached"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, vjust = 2, face = "bold"),
    axis.title.y.right = element_text(size = 14, vjust = 2, face = "bold", color = "black"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12),
    axis.text.y.right = element_text(size = 12, color = "black"),  # Improve readability
    panel.grid.major.x = element_line(color = "Gray90" , size = 0.5),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "top",
    legend.box.just = "center",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    plot.margin = margin(10, 10, 10, 10)
  ) +
  guides(size = guide_legend(override.aes = list(color = "black"))) +  # Change legend color to black for better visibility
  geom_text_repel(aes(label = ifelse(records.lost >= 500000000, paste(records.lost /1000000, "M"), "")), 
 size = 3.5, color = "black", nudge_y = 0.3, segment.color = "grey50") +
  geom_smooth(data = yearly_data, aes(x = as.Date(paste(year, "-01-01", sep = "")), y = (total_records_lost / coeff) + 1), method = "loess", se = FALSE,  color = "turquoise2", size = 1, alpha = 0.3) 

# Print the plot
print(gantt_plot)
```
